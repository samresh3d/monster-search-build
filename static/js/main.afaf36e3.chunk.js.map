{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchFeld","target","value","state","fetch","then","response","json","user","this","filteredMonster","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAGaA,G,MAAO,SAACC,GAAD,OAEpB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,8BAAIN,EAAMI,QAAQG,MAAlB,YCHSC,G,MAAW,SAACR,GAEzB,OAAO,qBAAKC,UAAY,YAAjB,SACFD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,WCL1CM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCiCCG,G,wDAjCb,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAAAI,GAAM,EAAKC,SAAS,CAACC,WAAYF,EAAEG,OAAOC,SAXvD,EAAKC,MAAQ,CACXb,SAAU,GACVU,WAAW,IALF,E,gEAQO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAKhC,IAAD,EAE0BC,KAAKN,MAA9Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,WACXU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAWY,kBAElG,OACE,sBAAK9B,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CAAWW,YAAc,oBAAoBC,aAAgBe,KAAKf,eAClE,cAAC,EAAD,CAAUJ,SAAUoB,W,GA1BVI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.afaf36e3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) => (\r\n\r\n<div className = \"card-container\">\r\n    <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email} </p>\r\n</div>\r\n\r\n)","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props)  => {\r\n\r\nreturn <div className = \"card-list\">\r\n    {props.monsters.map(monster => (<Card key={monster.id} monster = {monster} ></Card>))}\r\n    </div>\r\n    \r\n};","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange }) => (\r\n    <input \r\n    className=\"search\"\r\n    type=\"search\" \r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n    />\r\n\r\n)","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport {SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchFeld:''\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(user => this.setState({monsters: user}))\n  }\n\n  handleChange = e => {this.setState({searchFeld: e.target.value})}\n    \n  render(){\n\n    const {monsters, searchFeld } = this.state;\n    const filteredMonster = monsters.filter(monster => monster.name.toLowerCase().includes(searchFeld.toLowerCase()));\n    \n    return(\n      <div className=\"App\">\n        <h1>Monster Finder</h1>\n        <SearchBox placeholder = \"Find your Monster\" handleChange = {this.handleChange}  />\n        <CardList monsters={filteredMonster} />\n        \n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}